/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.lch.aop.plugin

import com.android.build.api.artifact.Artifact
import com.android.build.api.artifact.ArtifactKind
import com.android.build.api.artifact.MultipleArtifact
import com.android.build.api.instrumentation.*
import com.android.build.api.variant.AndroidComponentsExtension
import groovyjarjarasm.asm.Opcodes
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.Task
import org.gradle.api.file.Directory
import org.gradle.api.file.FileSystemLocation
import org.gradle.api.internal.component.ArtifactType
import org.gradle.api.provider.Property
import org.gradle.api.tasks.Input
import org.objectweb.asm.ClassVisitor
import org.objectweb.asm.util.TraceClassVisitor
import java.io.File
import java.io.PrintWriter

/**
 * A simple 'hello world' plugin.
 */
class AopPlugin2Plugin: Plugin<Project> {

    override fun apply(project: Project) {

        val androidComponents = project.extensions.getByType(AndroidComponentsExtension::class.java)

        androidComponents.onVariants { variant ->
            variant.transformClassesWith(ExampleClassVisitorFactory::class.java,
                InstrumentationScope.ALL) {
                it.writeToStdout.set(true)
            }
            variant.setAsmFramesComputationMode(FramesComputationMode.COPY_FRAMES)
        }
    }




//    override fun apply(project: Project) {
//
//        val androidComponents = project.extensions.getByType(AndroidComponentsExtension::class.java)
//
//        androidComponents.onVariants { variant ->
//            println("variant : ${variant.artifacts}")
//
//            val taskProvider =
//                project.tasks.register("${variant.name}ModifyClasses",ModifyClassesTask::class.java)
//
//            variant.artifacts.use<ModifyClassesTask>(taskProvider)
//                .wiredWith(ModifyClassesTask::allClasses, ModifyClassesTask::output)
//                .toTransform(MultipleArtifact.ALL_CLASSES_JARS)
//        }
//    }


    interface ExampleParams : InstrumentationParameters {
        @get:Input
        val writeToStdout: Property<Boolean>
    }

    abstract class ExampleClassVisitorFactory : AsmClassVisitorFactory<ExampleParams> {

        override fun createClassVisitor(
            classContext: ClassContext,
            nextClassVisitor: ClassVisitor
        ): ClassVisitor {
            val collectedIgnoreMethod = ArrayList<String>()
//            val aTraceClassAdapter =
//                TraceClassAdapter(Opcodes.ASM7, nextClassVisitor, collectedIgnoreMethod);
            return FindMethodInfoVisitor(nextClassVisitor)
        }

        override fun isInstrumentable(classData: ClassData): Boolean {
            return true//classData.className.startsWith("com.example")
        }
    }
}
